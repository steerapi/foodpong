// Generated by CoffeeScript 1.3.3
var ConfirmCtrl, FirstCtrl, FoodPong, GraphsCtrl, IndexCtrl, LoginCtrl, ManageOrdersCtrl, ManageSubscriptionsCtrl, OrdersCtrl, RestaurantsCtrl, SettingsCtrl, SignupCtrl, createNewUser, dateTimeConverter, listRestaurants, login, logout, r, randomUUID, timeConverter;

Usergrid.ApiClient.init('steerapi', 'sandbox');

FoodPong = {};

FoodPong.promise = null;

FoodPong.timeleft = 0;

r = Raphael("holder");

/*
Function to handle the create new user form submission.

First we make sure there are no errors on the form (in case they
submitted prior and have corrected some data).
Next, we get all the new data out of the form, validate it, then
call the create app user function to send it to the API

@method createNewUser
@return none
*/


login = function(username, password, cb) {
  return Usergrid.ApiClient.logInAppUser(username, password, (function(response, user) {
    var appUser;
    appUser = Usergrid.ApiClient.getLoggedInUser();
    return typeof cb === "function" ? cb(false, appUser) : void 0;
  }), function() {
    return typeof cb === "function" ? cb(true) : void 0;
  });
};

logout = function() {
  return Usergrid.ApiClient.logoutAppUser();
};

createNewUser = function(username, email, password, cb) {
  var appUser;
  if (Usergrid.validation.validateUsername(username, function() {}) && Usergrid.validation.validateEmail(email, function() {}) && Usergrid.validation.validatePassword(password, function() {})) {
    appUser = new Usergrid.Entity("users");
    appUser.set({
      username: username,
      email: email,
      password: password
    });
    return appUser.save((function() {
      return login(username, password, cb);
    }), function() {});
  } else {

  }
};

listRestaurants = function(cb) {
  var restaurants;
  restaurants = new Usergrid.Collection('restaurants');
  return restaurants.get(function() {
    return cb(restaurants);
  });
};

timeConverter = function(UNIX_timestamp) {
  var a, date, hour, min, month, months, sec, time, year;
  a = new Date(UNIX_timestamp);
  months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  year = a.getFullYear();
  month = months[a.getMonth()];
  date = a.getDate();
  hour = a.getHours();
  min = a.getMinutes();
  sec = a.getSeconds();
  min = ("0" + min).slice(-2);
  sec = ("0" + sec).slice(-2);
  time = "" + min + ":" + sec;
  return time;
};

dateTimeConverter = function(UNIX_timestamp) {
  var a, date, hour, min, month, months, sec, time, year;
  a = new Date(UNIX_timestamp);
  months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  year = a.getFullYear();
  month = months[a.getMonth()];
  date = a.getDate();
  hour = a.getHours();
  min = a.getMinutes();
  sec = a.getSeconds();
  hour = ("0" + hour).slice(-2);
  min = ("0" + min).slice(-2);
  sec = ("0" + sec).slice(-2);
  time = "" + month + " " + date + ", " + year + " " + hour + ":" + min + ":" + sec;
  return time;
};

randomUUID = function() {
  var i, itoh, s;
  s = [];
  itoh = "0123456789ABCDEF";
  i = 0;
  while (i < 36) {
    s[i] = Math.floor(Math.random() * 0x10);
    i++;
  }
  s[14] = 4;
  s[19] = (s[19] & 0x3) | 0x8;
  i = 0;
  while (i < 36) {
    s[i] = itoh[s[i]];
    i++;
  }
  s[8] = s[13] = s[18] = s[23] = "-";
  return s.join("");
};

IndexCtrl = function($scope) {
  $scope.currentRestaurant = null;
  $scope.currentOrder = 0;
  $scope.currentOrderAvailable = false;
  return $scope.timeleftStr = "";
};

FirstCtrl = function($scope) {
  $scope.username = "";
  $scope.isLoggedIn = function() {
    var user;
    user = Usergrid.ApiClient.getLoggedInUser();
    if (user) {
      $scope.username = user.get("username");
      return true;
    } else {
      return false;
    }
  };
  return $scope.logout = function() {
    return logout();
  };
};

ConfirmCtrl = function($scope) {
  return $scope.subscribe = function() {
    return $scope.$parent.currentOrder;
  };
};

GraphsCtrl = function($scope) {
  var fclick, fin, fout;
  $scope.tab = "Hybrid View";
  fin = function() {
    return this.flag = r.popup(this.bar.x, this.bar.y, (this.bar.value || "0") + "%").insertBefore(this);
  };
  fout = function() {
    return this.flag.animate({
      opacity: 0
    }, 300, function() {
      return this.remove();
    });
  };
  fclick = function(e) {
    var i, x;
    x = e.srcElement.getBBox().x;
    i = parseInt(x / 36);
    return console.log(i);
  };
  $scope.select = function(tab) {
    $scope.tab = tab;
    if (tab === "Hybrid View") {
      return $scope.plotH();
    } else if (tab === "Restaurant View") {
      return $scope.plotR();
    } else {
      return $scope.plotT();
    }
  };
  $scope.plotR = function() {
    var c, data1;
    data1 = [[55, 20, 13, 32, 5, 1, 2, 10]];
    r.clear();
    c = r.barchart(10, 10, 300, 220, data1, {
      type: "soft"
    });
    c.hover(fin, fout);
    return c.click(fclick);
  };
  $scope.plotT = function() {
    var c, data1;
    data1 = [[55, 20, 13, 32, 5, 1, 2, 10]];
    r.clear();
    c = r.barchart(10, 10, 300, 220, data1, {
      type: "soft"
    });
    c.hover(fin, fout);
    return c.click(fclick);
  };
  $scope.plotH = function() {
    var c, data1;
    data1 = [[55, 20, 13, 32, 5, 1, 2, 10]];
    r.clear();
    c = r.barchart(10, 10, 300, 220, data1, {
      type: "soft"
    });
    c.hover(fin, fout);
    return c.click(fclick);
  };
  return $scope.plotH();
};

ManageOrdersCtrl = function($scope) {};

ManageSubscriptionsCtrl = function($scope) {};

SettingsCtrl = function($scope) {
  $scope.email = "";
  return $scope.update = function() {
    var user;
    user = Usergrid.ApiClient.getLoggedInUser();
    user.set("email", email);
    return user.save();
  };
};

OrdersCtrl = function($scope, $timeout) {
  $scope.checks = {};
  $scope.total = 0;
  $scope.calculateTotal = function() {
    var k, total, v, _ref;
    total = 0;
    _ref = $scope.checks;
    for (k in _ref) {
      v = _ref[k];
      if (v) {
        total += $scope.$parent.currentRestaurant.get("menu")[k].price;
      }
    }
    return $scope.total = total;
  };
  return $scope.orderNow = function() {
    var currentOrder, k, orders, user, v, _ref;
    currentOrder = {};
    currentOrder.number = randomUUID();
    currentOrder.time = new Date().getTime();
    currentOrder.items = {};
    _ref = $scope.checks;
    for (k in _ref) {
      v = _ref[k];
      if (v) {
        currentOrder.items[k] = $scope.$parent.currentRestaurant.get("menu")[k];
      }
    }
    orders = $scope.$parent.currentRestaurant.get("orders");
    if (!orders) {
      $scope.$parent.currentRestaurant.set("orders", [currentOrder]);
    } else {
      orders.push(currentOrder);
    }
    $scope.$parent.currentRestaurant.set("orders", orders);
    user = Usergrid.ApiClient.getLoggedInUser();
    if (user) {
      orders = user.get("orders");
      if (!orders) {
        user.set("orders", [orders]);
      } else {
        orders.push(currentOrder);
      }
      user.set("orders", orders);
    }
    return $scope.$parent.currentOrder = currentOrder;
  };
};

RestaurantsCtrl = function($scope, $timeout) {
  $scope.restaurants = [];
  listRestaurants(function(restaurants) {
    var list;
    list = restaurants.getEntityList();
    list.sort(function(e1, e2) {
      var a, b;
      a = e1.get("discountpercent");
      b = e2.get("discountpercent");
      return b - a;
    });
    list.forEach(function(item) {
      return $scope.restaurants.push(item);
    });
    return $scope.$apply();
  });
  return $scope.startOrder = function(restaurant) {
    var promise, pulse;
    $scope.$parent.currentRestaurant = restaurant;
    $scope.$parent.currentOrderDateTime = dateTimeConverter((new Date()).getTime());
    $scope.$parent.currentOrderAvailable = true;
    FoodPong.timeleft = $scope.$parent.currentRestaurant.get("expiration") - (new Date()).getTime();
    if (promise) {
      $timeout.cancel(promise);
    }
    promise = $timeout(pulse = function() {
      console.log(FoodPong.timeleft);
      FoodPong.timeleft -= 1000;
      if (FoodPong.timeleft < 0) {
        $scope.$parent.currentOrderAvailable = false;
        $scope.$parent.timeleftStr = "Time's up!";
        return;
      }
      $scope.$parent.timeleftStr = timeConverter(FoodPong.timeleft);
      return $timeout(pulse, 1000);
    }, 1000);
    return $scope.$apply();
  };
};

LoginCtrl = function($scope) {
  $scope.username = "";
  $scope.password = "";
  return $scope.login = function() {
    return login($scope.username, $scope.password, function(err, user) {
      if (!err) {
        history.back();
        return localStorage.setItem("username", user.get("username"));
      }
    });
  };
};

SignupCtrl = function($scope) {
  $scope.username = "";
  $scope.email = "";
  $scope.password = "";
  return $scope.signup = function() {
    return createNewUser($scope.username, $scope.email, $scope.password, function(err, user) {
      if (!err) {
        history.back();
        return localStorage.setItem("username", user.get("username"));
      }
    });
  };
};
